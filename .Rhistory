library(slidify)
ls()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("class1.Rmd")
slidify("class1.Rmd")
slidify("class1.Rmd")
?publish()
?publish_github()
publish("Course-Notes", username="intro-r")
library(ggplot2)
library(gridExtra)
x1 <- seq(1,100, length=1000)
x2 <- seq(1,5, length=1000)
y1 <- (1/4) * x1^2 + rnorm(1000,0,1) # Monotonically Increasing Function
y2 <- exp(-x2+ rnorm(1000,0,0.1)) # Montonically Decreasing
y3 <- sin(x1 / 5) + rnorm(1000,0,1) # Not Monotonic
df <- as_data_frame(cbind(x1,x2,y1,y2,y3))
p1 <- ggplot(df, aes(x1,y1)) +
geom_point() +
ggtitle("Monotonic Increasing")
p2 <- ggplot(df, aes(x2,y2)) +
geom_point() +
ggtitle("Monotonic Decreasing")
p3 <- ggplot(df, aes(x1,y3)) +
geom_point() +
ggtitle("Non Monotonic")
grid.arrange(p1,p2,p3, nrow=1)
x1 <- seq(1,100, length=1000)
x2 <- seq(1,5, length=1000)
y1 <- (1/4) * x1^2 + rnorm(1000,0,1) # Monotonically Increasing Function
y2 <- exp(-x2+ rnorm(1000,0,0.1)) # Montonically Decreasing
y3 <- sin(x1 / 5) + rnorm(1000,0,1) # Not Monotonic
df <- as_data_frame(cbind(x1,x2,y1,y2,y3))
p1 <- ggplot(df, aes(x1,y1)) +
geom_point() +
ggtitle("Monotonic Increasing")
p1
x1 <- seq(1,100, length=1000)
y2 <- exp(-x2+ rnorm(1000,0,0.1)) # Montonically Decreasing
p2 <- ggplot(df, aes(x2,y2)) +
geom_point() +
ggtitle("Monotonic Decreasing")
p2
ggplot(df, aes(x2,y2)) +
geom_point()
library(ggplot2)
as_data_frame
df <- as_data_frame(cbind(x1,x2,y1,y2,y3))
library(tidyverse)
df <- as_data_frame(cbind(x1,x2,y1,y2,y3))
p1 <- ggplot(df, aes(x1,y1)) +
geom_point() +
ggtitle("Monotonic Increasing")
p2 <- ggplot(df, aes(x2,y2)) +
geom_point() +
ggtitle("Monotonic Decreasing")
p3 <- ggplot(df, aes(x1,y3)) +
geom_point() +
ggtitle("Non Monotonic")
grid.arrange(p1,p2,p3, nrow=1)
---- eval=F-------------------------------------------------------------
# Bootstrap 95% CI for regression coefficients
library(boot)
---- eval=F-------------------------------------------------------------
# Bootstrap 95% CI for regression coefficients
library(boot)
library(boot)
# bootstrapping with 1000 replications
results <- boot(data=mtcars, statistic=bs,
R=1000, formula=mpg~wt+disp)
# function to obtain regression weights
bs <- function(formula, data) {
fit <- lm(formula, data)
return(coef(fit))
}
# bootstrapping with 1000 replications
results <- boot(data=mtcars, statistic=bs,
R=1000, formula=mpg~wt+disp)
# bootstrapping with 1000 replications
results <- boot(data=mtcars, statistic=bs,
R=1000, formula=mpg~wt+disp)
# function to obtain regression weights
bs <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(coef(fit))
}
# bootstrapping with 1000 replications
results <- boot(data=mtcars, statistic=bs,
R=1000, formula=mpg~wt+disp)
# view results
results
# view results
results
plot(results, index=1) # intercept
plot(results, index=2) # wt
plot(results, index=3) # disp
# get 95% confidence intervals
boot.ci(results, type="bca", index=1) # intercept
